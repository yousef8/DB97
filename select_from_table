#!/usr/bin/bash

[[ -z "$db97" ]] && { echo -e "Environment Varialbe \$db97 isn't set.\nRun 'db97.sh' script instead"; exit 1; }
[[ "$#" = 1 ]] || { echo "Need 1 argument [The DB name]"; exit 1; }
db="$db97/$1"
tmp_file="/tmp/$table.select"


source ./lib/sys_utilities.sh || { echo "Couldn't import 'sys_utilities'"; exit 1; }
source ./lib/table_utilities.sh || { echo "Couldn't import 'table_utilities'"; exit 1; }
shopt -s extglob
export LC_COLLATE=C

#######################################
# Check if the list of arguments contain the all option.
# Globals:
#   None
# Arguments:
#   int indicate all option, list of choices user entered (int values)
# Returns:
#   0 if user enterd all option, 1 otherwise
#######################################
is_all() {
  all_option="$1"
  local i
  for i in "${@:2}"; do
    [[ "$i" == "$all_option" ]] && return 0;
  done
  return 1;
}

#######################################
# Check all integer arguments are in range between 1 and limit.
# Globals:
#   None
# Arguments:
#   limit, integers to check if they are in range
# Returns:
#   0 if all integer in range, 1 otherwise
#######################################
is_out_of_range() {
  limit="$1"
  local i
  for i in "${@:2}"; do
    [[ 1 -le "$i" && "$i" -le "$limit" ]] || return 0
  done
  return 1
}

#######################################
# Check all arguments are integers
# Globals:
#   None
# Arguments:
#   list of arguments to check they are int
# Returns:
#   0 if all arguments are int, 1 otherwise
#######################################
is_all_int() {
  local i
  for i in "${@}"; do
    [[ "$i" =~ ^[0-9]+$ ]] || return 1;
  done
  return 0
}


# Get Table Name
read -rp "Table name ('q' to quit) _> " table
is_quit "$table" && { exit 1; }

while [[ ! -f "$db/${table:-0}" ]]; do
  echo "$table doesnt't exist"
  read -rp "Table name ('q' to quit) _> " table
  is_quit "$table" && { exit 1; }
done


# Get column names
col_names=()
while read -r col; do
 col_names+=("$col")
done < <(cut -d: -f1 "$db/$table.meta")

######################################## Select Columns ##############################
((i=1))
for opt in "${col_names[@]}"; do
  echo "[$i] $opt"
  ((i++))
done
echo "[$i] *"

while true; do
  read -rp "Cols to display [space separated] ('q' to quit) _> " -a choice
  is_quit "${choice[0]}" && exit 1;
  [[ ${#choice[@]} -lt 1  ]] && { echo "Invalid choice"; continue; }
  is_all_int "${choice[@]}" || { echo "There is non int"; continue; }
  is_out_of_range "$((${#col_names[@]} + 1))" "${choice[@]}" && { echo "Choice out of range"; continue; }
  break;
done

header=""
cols_to_display=()
if is_all "$((${#col_names[@]} + 1))" "${choice[@]}"; then
  for i in "${!col_names[@]}"; do
    header+="${col_names[i]}:"
    cols_to_display+=($((i+1)))
  done
  header="${header%?}"
else
  for i in "${!choice[@]}"; do
    col_num=${choice[i]}
    header+="${col_names[col_num-1]}:"
    cols_to_display+=("$col_num")
  done
  header="${header%?}"
  unset col_num
fi

################################################ Where condition #############################################
echo
menu "Col to select by" "${col_names[@]}"
status="$?"
[[ $status = 0 ]] && { exit 1; }
cond_col="$status"

read -rp "Value to select by ('*'for all) _> " cond_value

echo "$header" >> "$tmp_file"

if [[ "$cond_value" == "*" ]]; then
  cut -d: -f "$(IFS=","; echo "${cols_to_display[@]}")" < <(awk 'BEGIN{FS=":"} {print}' "$db/$table") >> "$tmp_file"
else
  cut -d: -f "$(IFS=","; echo "${cols_to_display[@]}")" < <(awk -v field="$cond_col" -v value="$cond_value" 'BEGIN{FS=":"} {if ($field == value) print $0}' "$db/$table") >> "$tmp_file"
fi

echo
column -t -s ":" "$tmp_file"
rm -rf "$tmp_file"

